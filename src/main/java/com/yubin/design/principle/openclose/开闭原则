所谓开闭原则就是对修改关闭,对扩展开放。
在平时的开发中，如果我们大家都遵循设计原则的话，可以提高软件系统的扩展性，提高内聚，降低耦合。
开闭原则的中心思想是：我们要用抽象构建框架，用实现扩展细节。
如程序:定义了一个商品的接口,以及手机商品的实现,现在要求对部分商品进行打折,如对手机打八折,要求输出原价和打折价。
对于该需求,我们首先想到的是在接口中定义一个方法getDiscountPrice()获取打折假,然后实现该接口的类都实现该方法。
首先现实中商品有很多中，这样做了，每个实现了该接口的类都需要实现或者打折价的方法？这样做合理么？
我们都知道越底层的模块修改影响的范围就越大，越高层的模块修改影响的范围就越小。
那么我们该如何做呢？
首先我们可以定义一个手机商品的子类，这样的话我们就可以修改两个高层类而轻松的搞定需求,而且可以做到影响的范围最小化